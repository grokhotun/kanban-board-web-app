{"version":3,"sources":["components/Panel/Panel.jsx","components/Card/Card.jsx","components/Button/Button.jsx","components/AddForm/AddForm.jsx","assets/add.svg","assets/clear.svg","assets/remove.svg","containers/Panel.js","actions/panels.js","App.js","helpers/onDragEnd.js","reducers/panel.js","index.js","store.js"],"names":["Panel","cards","title","addCard","panelIndex","addPanel","removePanel","className","onClick","global","confirm","src","removeSvg","alt","droppableId","provided","droppableProps","ref","innerRef","map","card","index","key","cardIndex","placeholder","isEmptyPanel","Card","children","draggableId","draggableProps","dragHandleProps","Button","AddForm","useState","showForm","setShowForm","value","setValue","textareaRef","useRef","useEffect","current","focus","Fragment","onChange","e","console","log","target","rows","alert","clearSVG","addSVG","module","exports","connect","panels","items","dispatch","text","type","payload","name","onDragEnd","result","item","App","state","destination","copiedItems","source","sourceCardIndex","sourcePanelId","destinationCardIndex","destinationPanelId","sourceColumnIndex","parseInt","replace","destinationColumnIndex","currentIndex","splice","sourceCard","destinationCards","Array","from","initialState","rootReducer","action","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35d019b5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport Card from '../Card/Card';\r\nimport AddForm from '../AddForm/AddForm';\r\nimport './Panel.scss';\r\nimport removeSvg from '../../assets/remove.svg';\r\n\r\n\r\n\r\nconst Panel = ({ cards, title, addCard, panelIndex, addPanel, removePanel }) => {\r\n\r\n    const removeElement = () => {\r\n        if (global.confirm('Вы хотите удалить панель?')) {\r\n            removePanel(panelIndex)\r\n        }\r\n    }\r\n\r\n    return cards ? (\r\n        <div className=\"panel\">\r\n            {\r\n                <div className=\"panel__title\">\r\n                    <span>{title}</span>\r\n                    <img onClick={removeElement} src={removeSvg} alt=\"Remove icon\" />\r\n                </div>\r\n            }\r\n            <Droppable droppableId={`panel-${panelIndex}`}>\r\n                {\r\n                    provided => (\r\n                        <div  {...provided.droppableProps} ref={provided.innerRef} className=\"panel__body\">\r\n                            <div className=\"panel__items\">\r\n                                {\r\n\r\n                                    cards.map((card, index) => <Card key={index} cardIndex={index} panelIndex={panelIndex}>{card}</Card>)\r\n                                }\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Droppable>\r\n            <AddForm isEmptyPanel={false} addCard={addCard} panelIndex={panelIndex} addPanel={addPanel} />\r\n        </div >\r\n\r\n    ) : (\r\n            <div className=\"panel\">\r\n                <div className=\"panel__body\">\r\n                    <AddForm isEmptyPanel={true} addCard={addCard} panelIndex={panelIndex} addPanel={addPanel} />\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nPanel.propTypes = {\r\n    cards: PropTypes.node,\r\n    title: PropTypes.string\r\n};\r\n\r\n\r\nexport default Panel;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport './Card.scss';\r\n\r\n\r\nconst Card = ({ children, cardIndex, panelIndex }) => {\r\n    return typeof cardIndex !== \"undefined\" ? (\r\n        <Draggable key={cardIndex} draggableId={`card-${cardIndex}-${panelIndex}`} index={cardIndex}>\r\n            {\r\n                (provided) => {\r\n                    return (\r\n                        <div className=\"card\"\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                        >\r\n                            {children}\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        </Draggable>\r\n    ): (\r\n        <div className=\"card\">{children}</div>\r\n      );\r\n}\r\n\r\nCard.propTypes = {\r\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired\r\n};\r\n\r\n\r\nexport default Card;\r\n","import React from 'react'\r\n\r\n\r\nimport './Button.scss';\r\n\r\n\r\nconst Button = ({ children, onClick }) => {\r\n    return (\r\n        <button className=\"button\" onClick={onClick}>{children}</button>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n ","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nimport Card from '../Card/Card';\r\nimport Button from '../Button/Button';\r\n\r\nimport './AddForm.scss';\r\nimport addSVG from '../../assets/add.svg';\r\nimport clearSVG from '../../assets/clear.svg';\r\n\r\nconst AddForm = ({ isEmptyPanel, addCard, panelIndex, addPanel }) => {\r\n\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const textareaRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        if (textareaRef.current) {\r\n            textareaRef.current.focus();\r\n        }\r\n    }, [showForm])\r\n\r\n\r\n    const addElement = () => {\r\n\r\n        if (value) {        \r\n            if (isEmptyPanel) {\r\n                addPanel(value);\r\n            } else {\r\n                addCard(panelIndex, value)\r\n            }\r\n            setValue('');\r\n            setShowForm(false);\r\n        } else {\r\n            alert('Поле не может быть пустым!')\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                showForm\r\n                    ? (\r\n                        <div className={!isEmptyPanel ? \"add-form\" : \"add-form--empty\"}>\r\n                            <div className=\"add-form__input\">\r\n                                <Card>\r\n                                    <textarea\r\n                                        onChange={e => console.log(e.target.value) || setValue(e.target.value)}\r\n                                        value={value}\r\n                                        placeholder={isEmptyPanel ? \"Введите название колонки\" : \"Введите название карточки\"}\r\n                                        ref={textareaRef} rows=\"5\" ></textarea>\r\n                                </Card>\r\n                                <div className=\"add-form__bottom\">\r\n                                    <Button\r\n                                        onClick={addElement}\r\n                                    >{isEmptyPanel ? \"Добавить колонку\" : \"Добавить карточку\"}</Button>\r\n                                    <img\r\n                                        onClick={() => { setShowForm(false) }}\r\n                                        src={clearSVG} alt=\"Clear icon\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                    : (\r\n                        <div\r\n                            onClick={() => { setShowForm(true) }}\r\n                            className=\"panel__bottom\">\r\n                            <div className=\"panel__bottom-add-btn\">\r\n                                <img src={addSVG} alt=\"Add icon\" />\r\n                                <span>{isEmptyPanel ? \"Добавить колонку...\" : \"Добавить карточку...\"}</span>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AddForm;","module.exports = __webpack_public_path__ + \"static/media/add.b4e7124a.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear.e82c0deb.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.c91a89fa.svg\";","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\n\r\nimport { addCard, addPanel, removePanel, onDragEnd } from '../actions/panels';\r\nimport Panel from '../components/Panel/Panel';\r\n\r\n\r\n\r\nconst Panels = ({ items, addCard, addPanel, removePanel, onDragEnd }) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <DragDropContext onDragEnd={result => onDragEnd(result)}>\r\n                {\r\n                    items.map((item, index) => <Panel {...item} key={index} addCard={addCard} panelIndex={index} removePanel={removePanel} />)\r\n                }\r\n            </DragDropContext>\r\n            <Panel {...items} addCard={addCard} addPanel={addPanel} />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (panels) => {   \r\n    return {\r\n        items: panels\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addCard: (index, text) => {\r\n        dispatch(addCard(index, text))\r\n    },\r\n    addPanel: (name) => {\r\n        dispatch(addPanel(name))\r\n    },\r\n    removePanel: (index) => {\r\n        dispatch(removePanel(index))\r\n    },\r\n    onDragEnd: (result) => {\r\n        dispatch(onDragEnd(result))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Panels);\r\n","export const addCard = (index, text) => ({\r\n    type: 'ADD_CARD',\r\n    payload: {\r\n        index, \r\n        text\r\n    }\r\n})\r\n\r\nexport const addPanel = (name) => ({\r\n    type: 'ADD_PANEL',\r\n    payload: name\r\n})\r\n\r\nexport const removePanel = (index) => ({\r\n    type: 'REMOVE_PANEL',\r\n    payload: index\r\n})\r\n\r\nexport const onDragEnd = (result) => ({\r\n    type: 'DRAG_DROP',\r\n    payload: result\r\n})","import React from 'react';\r\n\r\nimport Panel from './components/Panel/Panel';\r\nimport Panels from './containers/Panel';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"mainblock\">\r\n          <Panels/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const onDragEnd = (result, state) => {\r\n    if (!result.destination) \r\n      return state;\r\n  \r\n    // Копируем входящий массив данных\r\n    const copiedItems = [...state];\r\n  \r\n    // Вытаскиваем объекты source и destination из result\r\n    const { source, destination } = result;\r\n    // Запихиваем в переменные необходимые данные (index захваченной карты, index колонки в котором карту захватили)\r\n    const { index: sourceCardIndex, droppableId: sourcePanelId } = source;\r\n    const { index: destinationCardIndex, droppableId: destinationPanelId } = destination;\r\n  \r\n    //Убираем лишние символы, парсим в integer\r\n    const sourceColumnIndex = parseInt(sourcePanelId.replace(\"panel-\", \"\"));\r\n    const destinationColumnIndex = parseInt(destinationPanelId.replace(\"panel-\", \"\"));\r\n  \r\n    // Мапим массив данных\r\n    copiedItems.map((item, currentIndex) => {\r\n      // Если индекс объекта совпал с индекстом куда бросаем карту, то\r\n      if (destinationColumnIndex === currentIndex) {\r\n        // удаляем нужную карту из массива в переменную\r\n        const [sourceCard] = copiedItems[sourceColumnIndex].cards.splice(sourceCardIndex, 1 );\r\n        // копируем тот массив, куда будем дропать карту\r\n        const destinationCards = Array.from(copiedItems[destinationColumnIndex].cards);\r\n        // вставляем карту в нужную колонку\r\n        destinationCards.splice(destinationCardIndex, 0, sourceCard);\r\n        // присваиваем новый массив с добавленный карточкой в текущей МАПающийся\r\n        item.cards = destinationCards;\r\n      }\r\n    })\r\n    return copiedItems;\r\n  };","import { onDragEnd } from \"../helpers/onDragEnd\";\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"План на месяц\",\r\n        cards: [\r\n            \"Пройти курс по React\",\r\n            \"Отметить день рождения\",\r\n            \"Купить машину\",\r\n            \"Изучить основый thunk\",\r\n            \"Подать заявление на курсы js\",\r\n            \"Записаться на курсы английского языка, чтобы уехать жить в Лондон\",\r\n        ]\r\n    },\r\n    {\r\n        title: \"План на день\",\r\n        cards: [\r\n            \"Купить молоко\",\r\n            \"Купить сыр и хлеб\",\r\n            \"Забронировать тир на субботу\",\r\n            \"Позвонить в поликлинику\",\r\n        ]\r\n    },\r\n    {\r\n        title: \"Гитара\",\r\n        cards: [\r\n            \"Выучить аккорды\",\r\n            \"Научиться зажимать  барэ\",\r\n            \"Научиться играть соло\",\r\n            \"Научиться делать перкуссию\",\r\n        ]\r\n    }\r\n];\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_CARD\":\r\n            return state.map((item, index) => {\r\n                if (action.payload.index === index) {\r\n                    return {\r\n                        ...item,\r\n                        cards: [...item.cards, action.payload.text]\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n\r\n\r\n        case \"ADD_PANEL\":\r\n            return [\r\n                ...state,\r\n                {\r\n                    title: action.payload,\r\n                    cards: []\r\n                }\r\n            ];\r\n\r\n        case \"DRAG_DROP\": {\r\n            return onDragEnd(action.payload, state);\r\n            \r\n        }\r\n\r\n        case \"REMOVE_PANEL\":\r\n            return state.filter(( e , index) => action.payload !== index)\r\n            // console.log(state.filter(( e , index) => action.payload !== index));\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nimport createStore from './store';\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport {rootReducer} from './reducers/panel';\r\n\r\nexport default () => {\r\n    const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n    return store;\r\n};\r\n"],"sourceRoot":""}